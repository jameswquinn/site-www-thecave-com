<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | thecave | Ramblings From A Crotchety Old Man]]></title>
  <link href="http://www.thecave.com/category/programming/atom.xml" rel="self"/>
  <link href="http://www.thecave.com/"/>
  <updated>2015-09-10T11:52:34-04:00</updated>
  <id>http://www.thecave.com/</id>
  <author>
    <name><![CDATA[Kirby Turner]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Dispatch Async to Main Queue Doesn't Work With Modal Window on Mac OS X]]></title>
    <link href="http://www.thecave.com/2015/08/10/dispatch-async-to-main-queue-doesnt-work-with-modal-window-on-mac-os-x/"/>
    <updated>2015-08-10T07:09:01-04:00</updated>
    <id>http://www.thecave.com/2015/08/10/dispatch-async-to-main-queue-doesnt-work-with-modal-window-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>I’ve been working on a Mac app lately, and while some things are similar to iOS, something are definitely different. One thing that is different are modal windows and run loops.</p>

<p>When you display a modal view on iOS you don’t get a new run loop for the view, but when you display a modal window on OS X a new run loop is created for the window. This is not necessarily a big deal unless you have a habit of using <a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/">GCD</a> to dispatch work between background and main queues. Let me give a more specific example.</p>

<p>I display a modal view, or in the cause of OS X, a modal window. The current view is managed by a view controller. User input is captured, then a URL request is sent off to a server on the Internet. The view controller is then notified when the URL request completes.</p>

<p>The typical pattern I follow for sending the request to the server and getting notified when done is to call a method that will dispatch the URL request to a background queue then dispatch to the main queue to call a block when complete. It looks something like this:</p>

<pre><code>- (void)sendSomething:(NSDictionary *)something completion:(void(^)(BOOL success, NSError *error))completion
{
  NSParameterAssert(something);
  dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // Send something out over the Internet.
    ...

    // All done. Assume success and error are already set.
    dispatch_async(dispatch_get_main_queue(), ^{
      if (completion) {
        completion(success, error);
      }
    });
  });
}
</code></pre>

<p>This is a simplified view of the pattern I often use. Call a method with a callback block. Perform some work on a background thread. When done, call the callback block on the main thread.</p>

<p>This pattern has served me well on iOS, but it has issues on Mac OS X when displaying a modal window.</p>

<p>When you display a modal window with <code>+[NSApp runModalForWindow:]</code> a new run loop is created for the window<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. That might seem fine until you call <code>dispatch_async(dispatch_get_main_queue(), ^{})</code> from a background thread. The block that you are trying to execute in the main queue will never run. And in my case, the <code>completion</code> block is never called. This means my modal window never receives the notification that the URL request completed. (NOTE: Mike Ash <a href="#update2">pointed out</a> that it’s not the new run loop that causes the problem.)</p>

<p>So how did I work around this problem?</p>

<p>Instead of dispatching the <code>completion()</code> to the main queue, I call it directly from the background thread. In the completion block itself, I decide how to get the code should run in the main thread. If my window isn’t modal, then I can use <code>dispatch_async(dispatch_get_main_queue(), ^{})</code>. But if my window is modal, which just happens to be the case for the app I’m working on, then I use <code>-performSelectorOnMainThread:withObject:waitUntilDone:</code>. So the code in my view controller looks something like this:</p>

<pre><code>- (void)someAction:(id)sender
{
  SomeHelper *helper = [[SomeHelper alloc] init];
  __weak __typeof__(self) weakSelf = self;
  [helper sendSomething:someValues completion:^(BOOL success, NSError *error) {
    __typeof__(self) strongSelf = weakSelf;
    if (strongSelf == nil) return;
    
    // This window is running modally with its own run loop. Therefore,
    // we cannot dispatch to the main queue. Instead, we must go old
    // school can call a selector on the main thread. In other words,
    // dispatch_async(dispatch_get_main_queue(), ^{}); does not work
    // here.
    
    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];
    userInfo[@"success"] = @(success);
    if (error) userInfo[@"error"] = error;
    
    [strongSelf performSelectorOnMainThread:@selector(completeSendSomething:) withObject:userInfo waitUntilDone:NO];
  }];
}

- (void)completeSendSomething:(NSDictionary *)userInfo
{
    ...
}
</code></pre>

<p>This pattern change now has me re-thinking how I use certain patterns in my code, especially for code that I intend on sharing between the two platforms.</p>

<p>Update: I posted a <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSApplication_Class/index.html#//apple_ref/occ/instm/NSApplication/runModalForWindow:">sample project</a> that illustrates the problem. In writing the sample app, I learned that the scenario that causes the problem is when the modal window is presented via a block that is dispatched asynchronously on the main queue.</p>

<p><a name="update2"></a>Update 2: <a href="https://mikeash.com/pyblog/">Mike Ash</a> pointed out that NSRunLoop is reentrant but GCD serial queues are not and this is the reason, not my theory of a different event loop, the block isn’t executed. Mike said, “The main queue is already executing a block, and it won’t execute a new one until that one is done. This is a subtle way in which dispatch on the main queue isn’t the same as <code>performSelectorOnMainThread</code>.”</p>

<p>Good to know and thanks, Mike, for explaining what is happening.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>From the <a href="https://github.com/kirbyt/MacModalDispatchAsyncProblem">Apple documentation</a> for <code>+[NSApp runModalForWindow:]</code>: “This method runs a modal event loop for the specified window synchronously. It displays the specified window, makes it key, starts the run loop, and processes events for that window. (You do not need to show the window yourself.) While the app is in that loop, it does not respond to any other events (including mouse, keyboard, or window-close events) unless they are associated with the window. It also does not perform any tasks (such as firing timers) that are not associated with the modal run loop. In other words, this method consumes only enough CPU time to process events and dispatch them to the action methods associated with the modal window.” <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirect Jekyll Site To HTTPS On OpenShift]]></title>
    <link href="http://www.thecave.com/2015/07/14/redirect-jekyll-site-to-https-on-openshift/"/>
    <updated>2015-07-14T14:17:53-04:00</updated>
    <id>http://www.thecave.com/2015/07/14/redirect-jekyll-site-to-https-on-openshift</id>
    <content type="html"><![CDATA[<p>I’m preparing to roll out a new <a href="http://jekyllrb.com">Jekyll</a> website, but unlike with my other Jekyll sites, I want each web page served up on <code>https</code>, not <code>http</code>. This means telling the server to redirect <code>http</code> request to <code>https</code>.</p>

<p>Hosting this new site on <a href="https://pages.github.com">Github Pages</a> isn’t option because Github Pages doesn’t support using a custom SSL certificate for your custom domain name. So I decided to see what it would take to host a Jekyll site on <a href="https://www.openshift.com">OpenShift</a>.</p>

<p>I was thrilled to learn that OpenShift has a <a href="https://hub.openshift.com/quickstarts/41-jekyll">quick start cartridge for installing Jekyll</a> on a new gear. With a click of a button I was able to deploy my new server instance with a boiler plate Jekyll site. I replaced the boiler plate site with the one I’ve been working on, and BAM! My site was up and running. The only step remaining was to force the web server to serve up the pages using <code>https</code>.</p>

<p>Turns out this is simple to do with OpenShift and Jekyll. First, I went over to namecheap.com and purchased a <a href="https://www.namecheap.com/security/ssl-certificates/rapidssl/rapidssl.aspx">RapidSSL certificate</a> with domain validation. Next, I followed the instructions from OpenShift to <a href="https://developers.openshift.com/en/managing-domains-ssl.html#_generating_a_csr_certificate_signing_request">generate my certificate signing request</a>. Using my newly generated CSR I activated my RapidSSL certificate over at namecheap, then I followed the instructions on OpenShift to <a href="https://developers.openshift.com/en/managing-domains-ssl.html#using-a-custom-ssl-certificate">add the certificate to my server instance</a>.</p>

<p>Up to this point everything was easy peasy, and all I had left to do was figure out how to redirect the Jekyll site from <code>http</code> to <code>https</code>. Turns out this isn’t difficult either.</p>

<p>The Jekyll website is actually just a static website hosted by Apache 2 running on an OpenShift gear. To force the redirect all I needed to do was add a <em>.htaccess</em> file to the root of my Jekyll site source code (note: the site source code is in the <em>source/</em> directory when using OpenShift) and put this rewrite rule in the file:</p>

<pre><code>RewriteEngine on  
RewriteCond %{HTTP:X-Forwarded-Proto} !https  
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R,L]  
</code></pre>

<p>After I added the <em>.htaccess</em> file with the rewrite rule, I pushed my changes to the remote git repository running on my OpenShift gear. This launched Jekyll which re-built my static website, this time with each web page being served with <code>https</code> instead of <code>http</code>.</p>

<p>Including the <em>.htaccess</em> file works great when deploying the Jekyll site to OpenShift, but approach isn’t unique to OpenShift. This should work for most Jekyll site hosted with Apache 2. And if for some reason Jekyll isn’t including the <em>.htaccess</em> file when it builds the site, add <code>include: [".htaccess"]</code> to your <em>_config.yaml</em> file.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Views Created In Code]]></title>
    <link href="http://www.thecave.com/2015/04/15/views-created-in-code/"/>
    <updated>2015-04-15T12:58:45-04:00</updated>
    <id>http://www.thecave.com/2015/04/15/views-created-in-code</id>
    <content type="html"><![CDATA[<p>Last year I posted an article that talks about why <a href="http://www.thecave.com/2014/05/04/i-stopped-using-nibs-thanks-to-auto-layout/">I stopped using Interface Builder</a> in favor of writing code to create views. There are some who disagree with me, and to them I say, “To each his own.” And there are some who agree with me, but choose not to publicize it. No matter. Every programmer has tricks that make them more productive, and creating views in code just happens to be one trick that works well for me.</p>

<p>What works for me doesn’t necessarily work for others. But I have to say, I had a brief “HA!” moment when I read this comment from Peter Steinberger’s post about <a href="http://petersteinberger.com/blog/2015/researching-researchkit/">researching Apple’s research kit</a>:</p>

<blockquote>
  <p>All views are created in code. Apple uses a Storyboard for the example catalog, but that’s it. Apple uses the standard pattern of overriding <code>viewDidLoad</code> to build UI in combination with Auto Layout and the visual format language, whenever possible.</p>
</blockquote>

<p>Great minds think alike.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Though I don’t override <code>viewDidLoad</code> to create my views. I usually create a view class, and I add an instance of the class to the view controller’s view in <code>loadView</code>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Après Code: A New Developer Meetup In Stowe Vt]]></title>
    <link href="http://www.thecave.com/2015/03/05/apres-code-a-new-developer-meetup-in-stowe-vt/"/>
    <updated>2015-03-05T10:54:05-05:00</updated>
    <id>http://www.thecave.com/2015/03/05/apres-code-a-new-developer-meetup-in-stowe-vt</id>
    <content type="html"><![CDATA[<p>I started organizing developer related meetups in 2001 starting with a weekly happy hour for dev friends and co-workers. Over the years I ended up organizing different types of events, from monthly meetings that included speakers to parties and happy hours to annual snowboarding trips. I even started <a href="http://www.nshappyhour.org">NSHappyHour</a> for Mac and iOS developers, which is still going on each month in Salem, MA.</p>

<p>I realized as I prepared for my move to Stowe, VT, that I was burnt out organizing events and meetups. I stepped down as co-organizer of <a href="http://www.cocoaheadsboston.org">CocoaHeads Boston</a> a few months before my move, which gave me a chance to be just a regular attendee. That’s when I realized I was done organizing events for a while.</p>

<p>After moving to Vermont, I was asked by a few folks if I would start a <a href="http://cocoaheads.org">CocoaHeads</a> chapter in the Burlington area. I said no because I needed a break. The break I needed wasn’t just from being an organizer. I needed a break from attending developer focused gatherings and networking events too. And while it’s been a bit lonely not having local folks to talk shop with on a regular basis, I’ve enjoyed my break. But break time is over.</p>

<p>It’s been nearly two years since I was last responsible for a meetup, but that changes tonight with the first of many Après Code events.</p>

<p>I’ve been thinking about hosting a developer meetup in Stowe since I moved here, but I wasn’t initially sure there would be enough interest. However, in my short time here I’ve met other software developers living in the area. Some work for companies here in town while others work for shops in and around Burlington. And the number of developers in our small community is growing with companies like <a href="http://corp.inntopia.com/careers/">Inntopia hiring</a> more developers. Even though I knew there were developers living and working in the area, I wasn’t ready to commit to a monthly meetup just yet.</p>

<p>That changed two days before I left for Whistler. I was talking with a local dev friend, Maya Ropelip<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, about writing apps for iOS. During our chat I mentioned my idea for a local meetup. He got excited about the idea and thought the timing was right for hosting a software developer gathering in Stowe. He also agreed to be the co-host in case I need to skip a meetup. So that night I grabbed the domain name, setup a <a href="http://www.apres-code.com/">website</a>, and created a new group on <a href="http://www.meetup.com/Apres-Code/">meetup.com</a>.</p>

<p>Starting a new group just 48 hours before I leave the country for a week and a half wasn’t the smartest thing for me to do, but I did it anyways. And now that I’m back home, I’m scrambling to get the word out about tonight’s inaugural Après Code. So without further ado, I’m happy to officially announce <a href="http://www.apres-code.com/">Après Code</a>.</p>

<h1 id="what-is-aprs-code">What Is Après Code</h1>

<p>Après Code is an informal gathering of software developers in Stowe, Vermont. The gathering is a chance for those of us living in and around Stowe, or just visiting the area, to get together to talk about joys of producing software and writing code, seek help or assist others, and most importantly meet and get to know other fine folks in the our community. The group is open to professionals, hobbyists, and anyone with an interest in designing, programming and creating software, apps, and websites.</p>

<h2 id="when">When</h2>

<p>We meet the first Thursday of each month, starting tonight, at 6:30 pm and go until the last person leaves. We’re gathering at <a href="http://rimrocksmountaintavern.com/">Rimrock’s Tavern</a> though this could change in the future. But for now Rimrock’s is the place to be.</p>

<h2 id="more-information">More Information</h2>

<p>You can find more information about the group at the Après Code <a href="http://www.apres-code.com/">website</a>, and you can receive email reminders about future Après Code events by joining the Après Code <a href="http://www.meetup.com/Apres-Code/">meetup.com group</a>.</p>

<p>So if you happen to be in the area, whether you live in the Stowe area or are just visiting, stop by tonight to say hi.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I gotta get this guy on Twitter or some other social network. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working 80+ Hours Isn't The Answer]]></title>
    <link href="http://www.thecave.com/2015/02/21/working-80-hours-isnt-the-answer/"/>
    <updated>2015-02-21T07:41:24-05:00</updated>
    <id>http://www.thecave.com/2015/02/21/working-80-hours-isnt-the-answer</id>
    <content type="html"><![CDATA[<p>A founder, or maybe the person is a manager type, asked on Quora, “<a href="http://www.quora.com/How-do-you-make-programmers-work-60-80-hours-per-week">How do you make programmers work 60-80 hours per week?</a>” While the question is a pathetic one, the answers that follow, especially the first one, are worth a read. And you should certainly read the answers if you happen to be one of those sad founders/manager types who wants their of programmers to work long hours. In short, if you are trying to force your programmers to work 60, 80 or more hours per week, then you are doing it wrong.</p>

<h2 id="personal-experience">Personal Experience</h2>

<p>I have first hand experience working 80+ hours per week. Heck, there were times I worked more than 100 hours in a single week at one particular startup. There were times when I would go days without going home, choosing instead to sleep in the office for an hour here and an hour there. And if I needed a change of clothes for an important meeting, I would go to the Banana Republic that was below my office to buy a change of clothes instead of going home.</p>

<p>The difference with this experience, however, was that I was never forced to put in those insane hours. No one ever asked me to work 80+ hours. I did it because I truly believed in what we were building. But I also knew what it took to be productive, and that’s why I often times made sure my team did not follow my lead.</p>

<p>I encouraged my team to work no more than 40 hours, and if I noticed someone reaching 50 hours I usually asked that person to take a break, go home, and enjoy life a bit. The work can wait. Sometimes the team member would take my suggestion and leave, other times they would not. But the choice was theirs. I never asked for more than 40 hours per week and in the end we created some amazing things in a short amount of time.</p>

<h2 id="get-to-the-point">Get To The Point</h2>

<p>So what’s my point here? My point is that you can’t force a programmer to work long hours. That person has to want to do it. There has to be a love or passion for what they are doing, otherwise it’s just work. And people max out, especially creative types, after about 32 to 40 hours of work in a single week.</p>

<h2 id="and-now">And Now</h2>

<p>I worked at a few startups putting in 60 or more hours per week, but those days are behind me. Those were fun times with lots of good memories, but I now find it’s more important to break up work with other interest. Today I’m a proponent of what I like to call underworking, or as I more often times jokingly call “being a slacker.”<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p>Life’s too short to overwork yourself today in hopes you will have the time later in life for the fun things. Who knows what will happen in the future. You could be hit by a beer truck tomorrow and die. That’s why I believe you should make a point to spend more time <a href="http://www.thecave.com/2014/06/20/enjoy-less-and-love-more/">doing what you love</a> now. The work can wait.</p>

<h2 id="the-long-trail-and-me">The Long Trail And Me</h2>

<p>A couple of years back I did a talk on the topic of underworking at the first <a href="http://www.360intersect.com/">360intersect</a>. In it I talk about my time hiking the Long Trail and the effect it has had on me and the amount of time I spend working each week. Here’s the video for those interested in watching it and learning more about the benefits of working less.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p><div class="vimeo-video"><figure><iframe src="//player.vimeo.com/video/65740037" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></figure></div></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Funny how working only 32 to 40 hours a week is thought to be slacking. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Sorry the first couple of minutes of the talk are missing. Someone forgot to push the record button. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>