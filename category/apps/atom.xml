<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apps | thecave | Ramblings From A Crotchety Old Man]]></title>
  <link href="http://www.thecave.com/category/apps/atom.xml" rel="self"/>
  <link href="http://www.thecave.com/"/>
  <updated>2015-02-21T23:25:45-05:00</updated>
  <id>http://www.thecave.com/</id>
  <author>
    <name><![CDATA[Kirby Turner]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Reporting Errors in Cross Post Part 2]]></title>
    <link href="http://www.thecave.com/2014/09/15/reporting-errors-in-cross-post-part-2/"/>
    <updated>2014-09-15T00:00:00-04:00</updated>
    <id>http://www.thecave.com/2014/09/15/reporting-errors-in-cross-post-part-2</id>
    <content type="html"><![CDATA[<p>Yesterday I talked about <a href="http://www.thecave.com/2014/09/14/reporting-errors-in-cross-post/">options for reporting errors</a> (and statuses) from the server back to the Cross Post app. Later I came up with a third option, which I like the best…hosting the error reports on <a href="http://www.rackspace.com/cloud/files/">Cloud Files</a>.</p>

<p>The Cross Post server is scalable, which means I cannot rely on the server’s file system. Data on the file system for one server is not synced to the other servers, and it’s possible that the server reporting the error is not the same server as the one that caught the error.</p>

<p>The obvious solution is to use a database server, but using a database server is overkill for Cross Post. But as I thought about it more I realized I all I need is a scalable file system, and that’s exactly what cloud storage systems like <a href="http://aws.amazon.com/s3/">S3</a> and <a href="http://www.rackspace.com/cloud/files/">Cloud Files</a> do. They provide a scalable file storage system.</p>

<p>I came to this realization while thinking about how a CMS in a scalable environment might store uploaded files. Uploaded files would likely be stored on a scalable file storage system like S3. And that’s exactly what I need for reporting errors, a scalable file system. As I keep saying, a database is overkill for the current needs of Cross Post.</p>

<h2 id="cloud-files">Cloud Files</h2>

<p>So why Cloud Files instead of S3? Two reasons. 1) I already use Cloud Files as my CDN for my websites. And 2) the price. I don’t expect to have a lot of error reports, and once the error has been reported to the app the report is deleted, so I estimate my total storage cost will be pennies.</p>

<p>A GB of Cloud Files storage is only 10 cents a month, and bandwidth is only 12 cents per GB per month. The total space needed for my error reports will certainly be less than a GB each month, so my estimated cost is only 22 cents per month, well within an affordable range for a snowboard bum like me.</p>

<h2 id="the-how-tos">The How Tos</h2>

<p>So exactly how will this work? Cross Post sends a payload to the server. Once the server receives the payload the HTTP connection ends. The server then processes the payload posting the status update and photos to the selected social networks.</p>

<p>If an error occurs while posting to a social network, it is captured and stored in a JSON file. The file name is the unique id generated by the Cross Post app when packaging up the payload. The server will then take the JSON file and post it to Cloud Files. The next time the Cross Post app is launched, it will check Cloud Files to see if an error report exists. If it does, then the app will report the error to the user, and it will send a request to the Cross Post server telling it to delete the error report from Cloud Files<sup id="fnref:deletefile"><a href="#fn:deletefile" class="footnote">1</a></sup>.</p>

<p>So what happens if an error occurred and the person never launches Cross Post ever again? For starters I’ll be sad, but with regards to the error report I can set an expiration date on the file, say 30 days. Cloud Files will take care of deleting the file when it expires. This means less work for my server and less code for me to write.</p>

<h2 id="not-just-for-errors">Not Just For Errors</h2>

<p>What I like about the approach is that it is not limited to reporting errors. I can use this approach to report any status back to the app, though at the moment the only status type I need to report is an error status. I subscribe to the “no news is good news” mindset meaning that once the server receives the payload, unless an error is reported, it’s safe to assume the post was sent to the different social networks without a problem.</p>

<div class="footnotes">
  <ol>
    <li id="fn:deletefile">
      <p>I let the Cross Post server delete the file from Cloud Files CDN so I don’t have to include the api key in the iOS app. <a href="#fnref:deletefile" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reporting Errors in Cross Post]]></title>
    <link href="http://www.thecave.com/2014/09/14/reporting-errors-in-cross-post/"/>
    <updated>2014-09-14T00:00:00-04:00</updated>
    <id>http://www.thecave.com/2014/09/14/reporting-errors-in-cross-post</id>
    <content type="html"><![CDATA[<p>A friend sent me suggestions on handling error reporting for Cross Post. I decided write up my current thinking here to see if my approach makes sense. Besides, trying to explain it in a set of 140 character tweets is less than ideal.</p>

<p>The challenge I face is reporting errors, or any status reporting for that matter, that happen once the server takes over the process. A timeout error, for example, could occur while the server is uploading a photo to Twitter. At this point the server no longer has a connection to the app, so trickling the error up to the app is not an option.</p>

<p>One option is to let the server eat the error. I know of a few similar solutions that eat the error, and I stopped using those apps for that very reason. If I ask an app to post something to Facebook, and the post never appears, then I want to know why. Letting the server eat the error is not an option for Cross Post. But how does the Cross Post app learn about the error?</p>

<p>One option is to use push notifications. When an error occurs the server can notify the user via a push notification. But this isn’t a trivial task to implement and it’s a path I don’t care to pursue unless absolutely necessary.</p>

<p>Another option, and the one I’m considering at the moment, is having the app include a unique identifier in the payload sent to the server. You can think of the identifier as a handle that the app can use to query to server for the status of the post.</p>

<p>If an error occurs on the server, the server will store the error with the identifier provided by the app as the primary key. The next time the app launches, it will check with the server to see if there were any errors. Once the app learns about the error, the server deletes the error from its data store.</p>

<p>This is a more reactive approach to reporting errors instead of a proactive approach, but it’s a cleaner solution than going down the push notification route. Beside, push notifications are not guaranteed so this approach is as reliable if not more reliable.</p>

<p>There are problems with this approach. First starters, only the device that sent the post will know to check for the error. Say I send a new post to Facebook using my iPhone. The post fails to make its way to Facebook. I launch Cross Post on my iPad. The iPad does not know about the post sent from iPhone, so it does not know to check for an error.</p>

<p>Now there are ways around this new problem. I could ask each user for a unique identifier such as an email address or username, but that’s another road I don’t care to travel down. People have more than enough logins to remember without me asking them to setup yet another online account and log into Cross Post. Besides, Cross Post can use iCloud to sync the unique identifier for each post between devices. In fact, this is what I will likely do. Key-value syncing using iCloud has been reliable for some time now, so why take advantage of it.</p>

<p>The other problem with having the app check the server for error reports is that now the server must persist the error report. This means I need to have some type of data persistence store. I could use the file system on the server, but I’ve configured my server app to scale. This means a load balancer is in place and as traffic increases OpenShift will spawn new server instances. This means it is possible that the server that caught the error will not be the server that the app queries for error reports. So storing the error report on the server’s file system is not an option. An additional server, aka a database server, is needed to persist the error reports.</p>

<p>Having an additional server for data persistence isn’t a big deal for OpenShift, but it is just one more server that must always be available. And now the backend for Cross Post is starting to grow. A couple of weeks ago the entire Cross Post solution ran on an iOS device. Now the solution spans the device and a server environment, and next I have to throw in a database server just for error reporting!?</p>

<p>Having the database does seem a bit overkill at the moment, but there might be a need for a database for persistent storage down the road anyways. So it looks like I will be adding a MongoDB database to the mix very soon. That is unless someone has a better idea to share with me.</p>

<p>Update: I came up with a <a href="http://www.thecave.com/2014/09/15/reporting-errors-in-cross-post-part-2/">third option</a> that is by far my favorite.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Posting to App.net, Facebook, and Twitter]]></title>
    <link href="http://www.thecave.com/2014/09/14/cross-posting-to-app.net-facebook-and-twitter/"/>
    <updated>2014-09-14T00:00:00-04:00</updated>
    <id>http://www.thecave.com/2014/09/14/cross-posting-to-app.net-facebook-and-twitter</id>
    <content type="html"><![CDATA[<p>Last year my wife told me more family and friends would “like” my photos on Facebook if I posted the them directly to Facebook. At the time I was using <a href="https://ifttt.com">ifttt</a> to selectively cross post to App.net and Facebook. This meant my photos on Facebook were actually links to the App.net, which is where the photos were being stored, and this required my Facebook followers to tap the link to see the photos. Not the best experience for my followers.</p>

<p>I decided to test my wife’s theory by posting photos directly to Facebook. Turns out she was right. I started getting more likes. Not only that, I found that family and friends posted more comments when I posted the photos directly. My wife was right. Posting photos directly to the social site is the best experience for followers and the best to become more engaged with your followers.</p>

<p>Now I could have setup an ifttt recipe that cross posted my Facebook photos to App.net, but that means my followers on App.net would have the less than ideal experience reading my posts and viewing my photos. So I started down the path of exploring different options for cross posting between different social networks.</p>

<p>After exploring options for nearly six months, I learned there is no single solution that will cross post to different social networks while giving the followers on each network the best viewing experience. So I set out to write my own app.</p>

<p>I quickly learned why no cross post solution that posts natively to each social network existed. It’s hard, and in the case of Facebook, nearly impossible to make the post look as if it were posted from the official app. But I figured it out and for the past few months I have been making posts using Cross Post.</p>

<p>Cross Post is the app I’ve been working on for the last few months. I’ve also been using it almost daily for months. The app was ready for public release back in August, but I decided to wait until the iOS 8 release. The primary reason for this is to avoid annoying iPhone 4 users. iPhone 4 cannot run iOS 8, and I had planned to drop support for iOS 7 the moment iOS 8 is released. So I decided to delay the release of Cross Post.</p>

<p>The delayed release gave me time to work on adding some new iOS 8 only features. One feature in particular that I’m very excited about is the share extension. This feature makes it possible for a person to cross post to different social networks from other apps running on their iPhone or iPad. This feature alone makes Cross Post much more useful than I ever imagined 6 months ago.</p>

<p>When I started learning the ins and outs of share extensions I thought to myself, “This will be a snap.” But as I got deeper into the code I realized Cross Post has one major issue that makes the Cross Post share extension suck. It takes Cross Post too damn long to post photos to multiple social sites.</p>

<p>Consider the scenario where you want to post 4 photos to App.net, Facebook, and Twitter. Each photo must be uploaded to each network. That means 12 different uploads, which is not speedy. This performance problem is acceptable in the Cross Post app because it performs the uploads even when the app is no longer active. A share extension, on the other hand, should return almost immediately. It should not, or have to, wait for the uploads to complete.</p>

<p>Extensions that need to upload data should do so using a background <code>NSURLSession</code>. Unfortunately this is not an option for Cross Post because it uses the Facebook SDK to post to Facebook and <code>SLRequest</code> to post to Twitter. Cross Post does use <code>NSURLSession</code> to post to App.net, but I want to be able to post to Facebook and Twitter via the share extension as well. So I needed to come up with a better way to post status updates and photos across different social networks.</p>

<p>To solve this problem I decided to create a Cross Post server. I was trying to avoid having a server for Cross Post, but it’s unavoidable if I want to provide the best user experience. With the server in place Cross Post can upload the post and photos once and let the server handle uploading the content to the selected networks. Best of all, the upload from the app can be accomplished using a single <code>NSURLSession</code> request, and it can be performed in a background session. This means the Cross Post share extension can return almost immediately. It also means that Cross Post now only needs to make one HTTP request whereas previously it had to make numerous requests. For instance, the previous scenario of posting 4 photos to 3 different social sites required 15 HTTP requests. Now Cross Post app accomplishes the same thing using a single HTTP request<sup id="fnref:onerequest"><a href="#fn:onerequest" class="footnote">1</a></sup>, and the Cross Post server handles making all the other requests on behalf of the app.</p>

<p>This performance boost does have some disadvantages. First and foremost, I’m now responsible for keeping the server environment up and running. But thanks to <a href="https://www.openshift.com">OpenShift</a>, I’m not too worried about that.</p>

<p>Another disadvantage is that reporting errors back to the iOS app is going to be more challenging. Cross Post and the share extension sends off the request to the server. Once the server receives the payload the HTTP connection ends. The server, however, continues working by posting the payload to the selected social sites. If there is an error posting to, say, Twitter, there is no way for the server to tell the Cross Post app because that connection no longer exist. I have some ideas on how to solve this problem, but it’s not going to happen in the first release.</p>

<p>Still, the improved user experience outweighs the disadvantages of using a server. And I have to admit, I’m enjoying getting back into server-side programming. So much as changed, for the better, over the years.</p>

<div class="footnotes">
  <ol>
    <li id="fn:onerequest">
      <p>I was able to reducing the number of calls to the server down to one by packaging the post and photos into a single .zip file, which is sent to the server. <a href="#fnref:onerequest" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's About More Than Shipping an App]]></title>
    <link href="http://www.thecave.com/2014/09/01/its-about-more-than-shipping-an-app/"/>
    <updated>2014-09-01T00:00:00-04:00</updated>
    <id>http://www.thecave.com/2014/09/01/its-about-more-than-shipping-an-app</id>
    <content type="html"><![CDATA[<p>There have been a number of recent blog posts about the doom and gloom of being an indie developer especially in the iOS world. The theme of these posts are basically the same. A developer spends some time building an app. The app is released into the wild, and sales are much lower than expected. Some developers give up while others will try again.</p>

<p>The problem as I see it after reading these doom and gloom posts is that the developer has no strategy for building and running a business beyond releasing an app. Releasing an app should not be your only plan for building a business. Releasing an app is just one part of being an indie developer. Another part, a much bigger part of being an indie developer, is being a business owner. And as a business owner you must have a plan consisting of short and long term strategies for building and running your business.</p>

<h1 id="have-a-plan">Have a Plan</h1>

<p>Running a business, even as an indie, requires much more than building and releasing an app. For starters, you need a business plan. Even if it’s not something you write down, you need to know what your plans are for making money and surviving the dry spells. Your plan should change and evolve over time as your business changes and grows.</p>

<p>When I started White Peak Software, I had no plan. I was fed up with others controlling my life and career. I knew I wanted to control those things, so I started my company. In some ways taking control of my life and career was my initial business plan but that didn’t help pay the bills. And at the rate I was going using that plan I knew my company would not last twelve months with me as a full time employee.</p>

<p>After six months of having no real plan or strategy for building my business, I hired a small business coach. A small business coach is like a life coach or therapist for your business.<sup id="fnref:sbc"><a href="#fn:sbc" class="footnote">1</a></sup> The coach doesn’t necessarily tell you what to you do. Instead the coach gives you the steps and guidance needed to help you figure out what your short term and long term plans are for your company.</p>

<p>For three months, my small business coach and I met once a week to talk about my business. During these talks it became clear to me that I wanted to write and sell my own software, but more importantly I wanted to write software that I could be proud of, software that I could call my baby.<sup id="fnref:consulting"><a href="#fn:consulting" class="footnote">2</a></sup> These talks gave me short and long terms goals for my company, and a plan for how I will make it happen.</p>

<p>With the help of my coach I came up with a 3 month plan, 6 month plan, 1 year plan, 5 year plan, and a 10 year plan. I’m coming up on the end of the 10 year plan, and I admit I’m not likely to reach my goals from my 10 year plan. But that fine because before I had these plans the likelihood that I would still be in business for myself in 2014 looked grim.</p>

<h1 id="have-a-structure">Have a Structure</h1>

<p>Another key component to running your own business is having the right company structure for your situation. Should you operate your business as a sole proprietor, an LLC, an S-Corp or even a C-Corp? Picking the right structure for your situation is key if you want your company to last. The company structure effects how and when you get paid, how and when taxes are paid, how much money you can stash away for retirement, and much more.</p>

<p>Talk to an accountant when deciding on a company structure. An accountant will look at your current financial situation, your short and long plans, and help you decide what company structure best suits your situation. And like your business plan, your company structure might change over time. It might be best for your business to start out as a sole proprietorship, then when revenues hit a certain amount change to an S-Corp. Or maybe your company should be a C-Corp on day one. Your accountant can help you decide what is best for you.</p>

<p>I made the mistake of setting up the company structure for White Peak Software without talking with an accountant. White Peak Software is an S-Corp, and I made that choice without consulting anyone else. Turns out I might have been better off setting up White Peak Software as a C-Corp, but even after all these years I still haven’t converted my company.</p>

<p>While being an S-Corp would not have been my accountant’s first choice for my business, it has worked out fine. Still, I wish I had gotten advice on the best company structure for my business when I first got started.</p>

<p>Speaking of my accountant…</p>

<h1 id="hire-an-accountant">Hire an Accountant</h1>

<p>You need an accountant, a really good one! A really good accountant is the virtual CFO of your company. Your accountant should do more than just file your taxes for you. You accountant should provide you with advice and direction on managing cash flow, handling and paying off debt, and all other financial areas of your business (and personal life).</p>

<p>The one thing that sticks in my mind after reading Jared Sinclair’s post about <a href="http://blog.jaredsinclair.com/post/93118460565/a-candid-look-at-unreads-first-year">Unread’s first year</a> is that 40% of his first years net revenue went towards self-employment taxes. I don’t know Jared’s particular situation or the type of company structure he was operating under, but I believe a really good accountant could have brought the amount he paid in taxes down sufficiently, maybe even down to 0%.</p>

<p>For the first three years I spent working full time for White Peak Software, the company took huge losses. Now this didn’t mean revenue wasn’t coming in - revenue was certainly coming in. It just meant company expenses were greater than the income…on paper. “On paper” is key here.</p>

<p>When I started my company I had a bedroom dedicated as my company office. White Peak Software paid me rent for the space, and this counted as a company expense. Did I actually have more money because my company was paying me rent? No. But on paper the purpose of that money impacted how much, or how little, I paid in taxes.</p>

<p>As my accountant likes to say, “Tax evasion is illegal. Tax avoidance is not.” Because the company took a loss those first three years, I was able to avoid paying incoming tax.</p>

<p>Now I don’t know Jared’s particular situation, but from reading that one blog post I can’t help but wonder, had Jared had the right company structure in place and a really good accountant, could he have kept 100% of that net revenue. It’s possible and that would have given him a better chance at staying indie longer.</p>

<p>This is why it’s important to have a really good accountant. And the earlier you get your accountant involved in your business the better.</p>

<h1 id="always-seek-advice-from-others">Always Seek Advice From Others</h1>

<p>My accountant isn’t the only person who helps advise me on financial matters. I also have a financial advisor who helps oversee my money.</p>

<p>My financial advisor is responsible for managing my retirement plan and other investments, but he is also involved with what is going on with my business. He provides a kind of “check and balance” with financial decisions and suggestions my accountant will make. If, for example, my accountant suggests a strategy for saving money or paying off debt, I run the suggestion by my financial advisor to get his feedback. And I make sure my accountant and financial advisor talk at least one a year to make sure everyone is on the same page.</p>

<h1 id="a-tip-that-has-saved-my-ass-more-than-once">A Tip That Has Saved My Ass More Than Once</h1>

<p>And speaking of financial advice, one piece of advice that has saved White Peak Software on more than one occasion is having a business line of credit with my bank. My accountant suggested this years ago. I was against the idea because 1) at the time I was debt free and had no need for the line of credit, and 2) I saw it as an easy opportunity to potentially go into debt. But White Peak Software would not be in business today if not for this outstanding piece of advice.</p>

<p>During long dry spells when cash isn’t flowing, I have access to a large sum of money that will help me weather the storm. However, I should note that I must be very diligent to pay back the borrowed money as quickly as possible once cash is flowing again, and this is sometimes not an easy thing to do. So having a business line of credit may or may not be a good thing for you and your business.</p>

<h1 id="its-about-more-than-the-app">It’s About More Than the App</h1>

<p>Being an indie developer, nay a <strong>business owner</strong> is not for everyone. It takes a lot of hard work. It takes planning and requires not only strategies for making money but strategies on how to survive when the money isn’t coming in. For the software developer turned business owner, writing the app is the easiest part, but it’s about more than the app. To survive, you need to give the business side of your company just as much attention as you give your app. Your company’s survival depends on it.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:sbc">
      <p>A small business coach is someone who can help mentor you and help you take your company to the next level. It can be someone who does coaching for a living or even a friend who is wise in the ways of running a business. My coach happens to be a business savvy friend of mine. And yes, I paid him for his time during those three months of coaching, which I easily earned back using his advice. <a href="#fnref:sbc" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:consulting">
      <p>While making a living from my own products is the ultimate goal for my company, the reality is I still rely on consulting and contract programming to help supplement my income. However, as a business owner I can be very selective with who I work with and the types of projects I work on.  This allows me to say true to writing software that I’m proud of and that I can call my baby. <a href="#fnref:consulting" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Camera Video to Your TV]]></title>
    <link href="http://www.thecave.com/2013/11/20/send-your-camera-video-to-your-tv/"/>
    <updated>2013-11-20T00:00:00-05:00</updated>
    <id>http://www.thecave.com/2013/11/20/send-your-camera-video-to-your-tv</id>
    <content type="html"><![CDATA[<p>Believe it or not, I finally released a new app for iOS. It’s my first new app for <a href="http://www.whitepeaksoftware.com/">White Peak Software</a> in more than 2 years. Somewhere along the way over the last two years I lost my way, but I’m back. </p>

<p>So what’s this new app? It’s <a href="http://www.whitepeaksoftware.com/big-screen">Big Screen</a>.</p>

<p>Big Screen lets you view the video from your iPhone or iPad’s camera on your TV. It requires an AppleTV, or other AirPlay receiver. Sure, you can use the built-in iOS 7 camera app to do the same, but you will see the app’s chrome on the TV. With Big Screen, there is no chrome or any other evidence that the app is being used. This makes Big Screen ideal for presentation, conferences, and other events where large screen TVs are used to let viewers in the room see the action on the stage.</p>

<p>I got the idea to write an <a href="http://www.whitepeaksoftware.com/main/big-screen/why">app to display the camera’s video on a TV</a> while attending an event at Rowan’s elementary school. It just goes to show you never know when a new app idea will pop up.</p>

<p>Big Screen is a free app available now in the iOS App Store. <a href="http://www.whitepeaksoftware.com/main/store/buy/big-screen">Grab a copy</a>, and let me know what you think.</p>

]]></content>
  </entry>
  
</feed>